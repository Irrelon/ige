"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_irrelon_ige"] = self["webpackChunk_irrelon_ige"] || []).push([["src_engine_core_IgeUiManagerController_ts"],{

/***/ "./src/engine/core/IgeUiManagerController.ts":
/*!***************************************************!*\
  !*** ./src/engine/core/IgeUiManagerController.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IgeUiManagerController: () => (/* binding */ IgeUiManagerController)\n/* harmony export */ });\n/* harmony import */ var _engine_core_IgeEventingClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/engine/core/IgeEventingClass */ \"./src/engine/core/IgeEventingClass.ts\");\n/* harmony import */ var _engine_instance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/engine/instance */ \"./src/engine/instance.ts\");\n/* harmony import */ var _engine_utils_arrays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/engine/utils/arrays */ \"./src/engine/utils/arrays.ts\");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/enums */ \"./src/enums/index.ts\");\n\n\n\n\nclass IgeUiManagerController extends _engine_core_IgeEventingClass__WEBPACK_IMPORTED_MODULE_0__.IgeEventingClass {\n    constructor() {\n        super(...arguments);\n        this.componentId = \"ui\";\n        this.classId = \"IgeUiManagerController\";\n        this._focus = null; // The element that currently has focus\n        this._caret = null; // The caret position within the focused element\n        this._register = [];\n        this._styles = {};\n        this._elementsByStyle = {};\n        this._addEventListeners = (callback) => {\n            // Remove any previous listeners\n            this._removeEventListeners();\n            _engine_instance__WEBPACK_IMPORTED_MODULE_1__.ige.dependencies.waitFor([\"input\"], () => {\n                _engine_instance__WEBPACK_IMPORTED_MODULE_1__.ige.input.on(\"keyDown\", this._keyDown);\n                callback === null || callback === void 0 ? void 0 : callback();\n            });\n        };\n        this._removeEventListeners = (callback) => {\n            _engine_instance__WEBPACK_IMPORTED_MODULE_1__.ige.dependencies.waitFor([\"input\"], () => {\n                _engine_instance__WEBPACK_IMPORTED_MODULE_1__.ige.input.off(\"keyDown\", this._keyDown);\n                callback === null || callback === void 0 ? void 0 : callback();\n            });\n        };\n        this._keyUp = (event) => {\n            // Direct the key event to the focused element\n            if (this._focus) {\n                this._focus.emit(\"keyUp\", event);\n                _engine_instance__WEBPACK_IMPORTED_MODULE_1__.ige.input.stopPropagation();\n            }\n        };\n        this._keyDown = (event) => {\n            // Direct the key event to the focused element\n            if (this._focus) {\n                this._focus.emit(\"keyDown\", event);\n                _engine_instance__WEBPACK_IMPORTED_MODULE_1__.ige.input.stopPropagation();\n            }\n        };\n    }\n    isReady() {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this._addEventListeners(resolve);\n            }, 1);\n        });\n    }\n    style(name, data) {\n        if (name !== undefined) {\n            if (data !== undefined) {\n                // Set the data against the name, update any elements using the style\n                this._styles[name] = data;\n                return this;\n            }\n            // Get the data and return\n            return this._styles[name];\n        }\n        return;\n    }\n    /**\n     * Registers a UI element with the UI manager.\n     * @param elem\n     */\n    registerElement(elem) {\n        this._register.push(elem);\n    }\n    /**\n     * Un-registers a UI element with the UI manager.\n     * @param elem\n     */\n    unRegisterElement(elem) {\n        (0,_engine_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.arrPull)(this._register, elem);\n        // Kill any styles defined for this element id\n        delete this._styles[\"#\" + elem._id];\n        delete this._styles[\"#\" + elem._id + \":active\"];\n        delete this._styles[\"#\" + elem._id + \":focus\"];\n        delete this._styles[\"#\" + elem._id + \":hover\"];\n    }\n    /**\n     * Registers a UI element against a style for quick lookup.\n     * @param elem\n     */\n    registerElementStyle(elem) {\n        if (elem && elem._styleClass) {\n            this._elementsByStyle[elem._styleClass] = this._elementsByStyle[elem._styleClass] || [];\n            this._elementsByStyle[elem._styleClass].push(elem);\n        }\n    }\n    /**\n     * Un-registers a UI element from a style.\n     * @param elem\n     */\n    unRegisterElementStyle(elem) {\n        if (elem && elem._styleClass) {\n            this._elementsByStyle[elem._styleClass] = this._elementsByStyle[elem._styleClass] || [];\n            this._elementsByStyle[elem._styleClass].push(elem);\n        }\n    }\n    canFocus(elem) {\n        return elem._allowFocus;\n    }\n    /**\n     * Tells the currently focussed element to blur. Can still\n     * be cancelled by an event listener that returns a cancel signal.\n     */\n    blurCurrent() {\n        if (!this._focus)\n            return;\n        this._focus.blur();\n    }\n    /**\n     * Attempts to place focus on the passed element. If focus is successful\n     * or the element is already focussed, returns true, otherwise returns\n     * false.\n     * @param elem\n     */\n    focus(elem) {\n        //console.log(\"Global focus call\", elem, new Error().stack);\n        if (elem !== undefined) {\n            if (elem !== this._focus) {\n                //console.log(\"Global focus being set to\", elem, new Error().stack);\n                // The element is not our current focus so focus to it\n                const previousFocus = this._focus;\n                // Tell the current focused element that it is about to lose focus\n                if (!previousFocus || previousFocus.emit(\"blur\", elem) !== _enums__WEBPACK_IMPORTED_MODULE_3__.IgeEventReturnFlag.cancel) {\n                    if (previousFocus) {\n                        previousFocus._focused = false;\n                        previousFocus.blur();\n                    }\n                    // The blur was not cancelled\n                    if (elem.emit(\"focus\", previousFocus) !== _enums__WEBPACK_IMPORTED_MODULE_3__.IgeEventReturnFlag.cancel) {\n                        // The focus was not cancelled\n                        this._focus = elem;\n                        elem._focused = true;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We are already focused\n                return true;\n            }\n        }\n        return false;\n    }\n    blur(elem) {\n        //console.log('blur', elem._id, elem);\n        if (elem !== undefined) {\n            if (elem === this._focus) {\n                // The element is currently focused\n                // Tell the current focused element that it is about to lose focus\n                if (elem.emit(\"blur\") !== _enums__WEBPACK_IMPORTED_MODULE_3__.IgeEventReturnFlag.cancel) {\n                    // The blur was not cancelled\n                    this._focus = null;\n                    elem._focused = false;\n                    elem._updateStyle();\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nIgeUiManagerController.componentTargetClass = \"IgeEngine\";\n\n\n//# sourceURL=webpack://@irrelon/ige/./src/engine/core/IgeUiManagerController.ts?");

/***/ })

}]);